// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String       @unique
  gender        Gender
  birthday      DateTime     @db.Date
  password      String
  profilePicUrl String?
  role          Role
  isVerified    Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  property      Properties[]
}

model Properties {
  id             Int              @id @default(autoincrement())
  name           String
  description    String           @db.Text
  rules          String           @db.Text
  facilities     String           @db.Text
  address        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted        Boolean          @default(false)
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  category       Categories       @relation(fields: [categoryId], references: [id])
  categoryId     Int
  province       Provincies       @relation(fields: [provinceId], references: [id])
  provinceId     Int
  propertyImages PropertyImages[]
  city           Cities           @relation(fields: [cityId], references: [id])
  cityId         Int
  rooms          Rooms[]
}

model PropertyImages {
  id             Int        @id @default(autoincrement())
  propertyPicUrl String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  property       Properties @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId     Int
}

model Rooms {
  id         Int          @id @default(autoincrement())
  name       String
  facilities String       @db.Text
  capacity   Int
  bedType    String //enum
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  property   Properties   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  roomImages RoomImages[]
  roomPrice  RoomPrice[]
}

model RoomImages {
  id         Int      @id @default(autoincrement())
  roomPicUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  room       Rooms    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId     Int
}

model RoomPrice {
  id        Int      @id @default(autoincrement())
  price     Int
  date      DateTime @db.Date()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Rooms    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
}

model Categories {
  id        Int          @id @default(autoincrement())
  category  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  property  Properties[]
}

model Provincies {
  id        Int          @id @default(autoincrement())
  provincy  String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  property  Properties[]
  city      Cities[]
}

model Cities {
  id         Int          @id @default(autoincrement())
  city       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  province   Provincies   @relation(fields: [provinceId], references: [id])
  provinceId Int
  peroperty  Properties[]
}

enum Role {
  User
  Tenant
}

enum Gender {
  Male
  Female
}
